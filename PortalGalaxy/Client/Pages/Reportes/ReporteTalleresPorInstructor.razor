@page "/reportes/tallerporinstructor"
@inject ITallerProxy TallerProxy
@inject IToastService ToastService
@attribute [Authorize(Roles = Constantes.RolAdministrador)]

<h3 class="text-primary">Talleres por instructor</h3>

<div class="row justify-content-end">
    <div class="col offset-10">
        <select id="anio" class="form-select" @onchange="CambiarAnio">
            @foreach (var item in ListAnios)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>
</div>
<div class="row justify-content-between">
    <BarChart @ref="_barChart" Class="mb-4"/>
</div>

@code {

    private BarChart _barChart = default!;

    private ChartData _chartData = default!;

    private BarChartOptions _chartOptions = default!;

    private List<int> ListAnios { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await DataInicialAsync();

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        ListAnios = new List<int>();
        for (var i = DateTime.Now.Year; i >= DateTime.Now.AddYears(-3).Year; i--)
        {
            ListAnios.Add(i);
        }
    }

    private async Task DataInicialAsync()
    {
        _chartData = new ChartData
        {
            Labels = new List<string> { "Instructor 1", "Instructor 2" },
            Datasets = new List<IChartDataset>()
            {
                new BarChartDataset()
                {
                    Label = "Instructores",
                    Data = Enumerable.Range(0, 12).Select(_ => Convert.ToDouble(0)).ToList(),
                    BackgroundColor = new List<string> { "#2c3e50" },
                    CategoryPercentage = 0.9,
                    BarPercentage = 1,
                }
            }
        };

        _chartOptions = new BarChartOptions();

        _chartOptions.Interaction.Mode = InteractionMode.Index;
        _chartOptions.IndexAxis = "y";
        _chartOptions.Responsive = true;

        await _barChart.InitializeAsync(_chartData, _chartOptions);
    }

    private async Task CargaDatos(int anio)
    {
        try
        {
            var response = await TallerProxy.ListarPorInstructorAsync(anio);
            if (response.Success)
            {
                var data = response.Data;

                var labels = data.Select(x => x.Instructor).ToList();
                var datos = data.Select(x => Convert.ToDouble(x.Cantidad)).ToList();

                _chartData.Labels?.Clear();
                _chartData.Labels?.AddRange(labels);

                if (_chartData.Datasets != null)
                {
                    var firstDataSet = (BarChartDataset) _chartData.Datasets.First();
                    firstDataSet.Data = datos;
                }

                await _barChart.UpdateAsync(_chartData, _chartOptions);

                await DataInicialAsync();
            }
            else
            {
                ToastService.ShowError(response.ErrorMessage!);
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private async Task CambiarAnio(ChangeEventArgs? e)
    {
        if (e is { Value: not null })
        {
            await CargaDatos(int.Parse(e.Value.ToString() ?? DateTime.Now.Year.ToString()));
        }
    }

}