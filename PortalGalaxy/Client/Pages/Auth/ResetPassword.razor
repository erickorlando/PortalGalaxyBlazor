@page "/reset-password"
@using System.Text
@using Microsoft.AspNetCore.WebUtilities
@layout UserLayout
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IUserProxy UserProxy

<div class="col-lg-12">
    <h3 class="text-center">Recuperar cuenta</h3>
    <EditForm Model="Request" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <div class="form-floating mb-3">
            <input class="form-control" id="inputPassword" type="password" @bind-value="Request.Clave" autocomplete="off"/>
            <label for="inputPassword">Clave</label>
            <ValidationMessage For="() => Request.Clave" />
        </div>
        <div class="form-floating mb-3">
            <input class="form-control" id="inputConfirmPassword" type="password" @bind-value="Request.ConfirmarClave" autocomplete="off"/>
            <label for="inputConfirmPassword">Confirmar Clave</label>
            <ValidationMessage For="() => Request.ConfirmarClave" />
        </div>
        <div class="d-grid gap-1 mt-4">
            <button class="btn btn-primary" type="submit">Restablecer</button>
        </div>
        <ValidationSummary />
    </EditForm>
    <div class="row justify-content-between mt-4">
        <div class="col-auto">
            <NavLink class="link-danger" href="login">Iniciar sesion</NavLink>
        </div>
        <div class="col-auto">
            <NavLink class="link-dark" href="register">Registrarme</NavLink>
        </div>
    </div>
</div>
<LoadingComponent IsLoading="IsLoading" />


@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string? Email { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? Token { get; set; }

    public ResetPasswordDtoRequest Request { get; set; } = new();

    public bool IsLoading { get; set; }

    protected override void OnParametersSet()
    {
        Console.WriteLine("email: {0}", Email);
        Console.WriteLine("token: {0}", Token);

        Request.Email = string.IsNullOrWhiteSpace(Email) ? string.Empty : Email.Trim();

        // decodificar el token recibido
        if (!string.IsNullOrWhiteSpace(Token))
        {
            Request.Token = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Token));
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            IsLoading = true;
            await UserProxy.ResetPassword(Request);
            ToastService.ShowInfo("Se ha establecido una nueva contraseña para tu cuenta");

            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

}
